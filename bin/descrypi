#!/usr/bin/env python3

"""
Descry Pi

Find Raspberry Pis on the network by examining `arp` responses.
"""

import argparse
import shutil
import sys

import executable # tweak sys.path to find descrypi module

from descrypi import arp
from descrypi import fping
from descrypi import ieee_ra
from descrypi import network
from descrypi import macipsconfig


def find(_args):
  """Main entry point for descrypi: find Pi(s)!"""

  mac_ip_config = macipsconfig.MACIPsConfig()
  mac_ips = arp.filter_mac_ips(arp.find_mac_ips())
  changes = mac_ip_config.record(mac_ips)

  print("MAC -> IPs of Pis:")
  for mac, ip, new, assigned in changes:
    print("%s -> %s %s%s" % (
        mac, ip, ("(new!) " if new else ""), ("assigned to %s!" % assigned if assigned else "")))
  if len(changes) == 0:
    print("None found. Try running the 'scan' command.")


def scan(args):
  """fping the interface and report 'up' hosts."""
  if not shutil.which("fping"):
    sys.stderr.write("Missing `fping`. Try `brew install fping`, `apt-get install fping`, etc\n")
    sys.exit(1)
  interfaces = network.local_interfaces(args.interface)
  for interface in interfaces:
    print("Host(s) up on %s:" % interface.name)
    print(", ".join(fping.fping(interface.network)))

def ping(_args):
  """fping the known Pi hosts and report who's 'up'."""
  mac_ip_config = macipsconfig.MACIPsConfig()
  print("Host(s) up:", ", ".join(fping.ping(mac_ip_config.current_hosts())))


def print_network(interface, host, subnet, gateway):
    print("%10s %15s %18s %15s" % (interface, host, subnet, gateway))

def networks(_args):
  """Dump known local and remote network configs."""
  print("Local network configs:")
  print_network("Interface", "Host", "Subnet", "Gateway")
  for interface in network.local_interfaces():
    print_network(interface.name, interface.ip, interface.network, interface.gateway)

  print("\nRemote network configs:")
  print_network("Interface", "Host", "Subnet", "Gateway")
  mac_ip_config = macipsconfig.MACIPsConfig()
  for host in mac_ip_config.current_hosts():
    interface = network.remote_interface(host)
    if interface is None:
      continue
    print_network(interface.name, interface.ip, interface.network, interface.gateway)


def check_ieee_macs(_args):
  """Check that the Raspberry Pi folks haven't registered another MAC prefix."""
  changes = ieee_ra.check_ieee_macs()
  if not changes:
    print("Raspberry Pi MAC prefixes up-to-date!")
  else:
    print("Raspberry Pi MAC prefixes have changed to %s! Please file an issue." % changes)


def main():
  """Main."""
  parser = argparse.ArgumentParser()
  subparsers = parser.add_subparsers()

  subparser = subparsers.add_parser('find')
  subparser.set_defaults(func=find)
  parser.set_defaults(func=find)

  subparser = subparsers.add_parser('scan')
  subparser.add_argument('-i', '--interface', help="specify network interface")
  subparser.set_defaults(func=scan)

  subparser = subparsers.add_parser('ping')
  subparser.set_defaults(func=ping)

  subparser = subparsers.add_parser('networks')
  subparser.set_defaults(func=networks)

  subparser = subparsers.add_parser('check_ieee_macs')
  subparser.set_defaults(func=check_ieee_macs)

  args = parser.parse_args()
  args.func(args)  # call the default function


if __name__ == '__main__':
  main()
